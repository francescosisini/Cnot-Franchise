import pygame
import random
import math

# Inizializza Pygame
pygame.init()

# Imposta dimensioni della finestra
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Labirinto Neurale di Caterina")

# Colori
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
PURPLE = (128, 0, 128)
COLORS = [RED, YELLOW, GREEN, BLUE, PURPLE]

# Font
font = pygame.font.Font(None, 36)

# Grafico NEO PI-R
traits = {
    "Neuroticismo": 50,
    "Estroversione": 50,
    "Apertura": 50,
    "Amicalità": 50,
    "Coscienziosità": 50
}
max_trait_value = 100

# Posizione iniziale di Caterina
player_pos = [WIDTH // 2, HEIGHT // 2]
player_speed = 4

# Fantasmini
ghosts = []
ghost_radius = 15
num_ghosts = 5

# Connessioni neurali (rete del labirinto)
connections = []
num_connections = 20

# Game state
running = True
game_over = False

# Funzione per disegnare il grafico NEO PI-R
def draw_radar_chart():
    center = (WIDTH - 200, HEIGHT // 2)
    radius = 100
    angle_step = 360 / len(traits)
    angles = []
    
    # Calcola le coordinate per ciascun tratto
    for i, (trait, value) in enumerate(traits.items()):
        angle = math.radians(i * angle_step)
        angles.append((center[0] + radius * value / max_trait_value * math.cos(angle),
                       center[1] - radius * value / max_trait_value * math.sin(angle)))
    
    # Disegna il poligono del radar
    pygame.draw.polygon(screen, GREEN, angles, 1)
    
    # Disegna i tratti e le linee di riferimento
    for i, point in enumerate(angles):
        pygame.draw.line(screen, WHITE, center, point, 1)
        trait_text = font.render(list(traits.keys())[i], True, WHITE)
        screen.blit(trait_text, (point[0] - 20, point[1] - 20))

# Funzione per disegnare la rete neurale
def draw_neural_network():
    for conn in connections:
        pygame.draw.line(screen, BLUE, conn[0], conn[1], 2)

# Funzione per aggiornare i fantasmini
def update_ghosts():
    for ghost in ghosts:
        ghost["pos"][0] += ghost["speed"][0]
        ghost["pos"][1] += ghost["speed"][1]
        
        # Controlla collisioni con i bordi
        if ghost["pos"][0] <= 0 or ghost["pos"][0] >= WIDTH:
            ghost["speed"][0] *= -1
        if ghost["pos"][1] <= 0 or ghost["pos"][1] >= HEIGHT:
            ghost["speed"][1] *= -1

# Funzione per disegnare i fantasmini
def draw_ghosts():
    for ghost in ghosts:
        pygame.draw.circle(screen, ghost["color"], ghost["pos"], ghost_radius)

# Inizializza fantasmini e connessioni
for _ in range(num_ghosts):
    ghosts.append({
        "pos": [random.randint(50, WIDTH - 50), random.randint(50, HEIGHT - 50)],
        "speed": [random.choice([-2, 2]), random.choice([-2, 2])],
        "color": random.choice(COLORS)
    })

for _ in range(num_connections):
    connections.append((
        [random.randint(50, WIDTH - 50), random.randint(50, HEIGHT - 50)],
        [random.randint(50, WIDTH - 50), random.randint(50, HEIGHT - 50)]
    ))

# Ciclo principale
clock = pygame.time.Clock()
while running:
    screen.fill(BLACK)
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
    
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        player_pos[0] -= player_speed
    if keys[pygame.K_RIGHT]:
        player_pos[0] += player_speed
    if keys[pygame.K_UP]:
        player_pos[1] -= player_speed
    if keys[pygame.K_DOWN]:
        player_pos[1] += player_speed

    # Disegna tutto
    draw_neural_network()
    draw_radar_chart()
    update_ghosts()
    draw_ghosts()
    pygame.draw.circle(screen, WHITE, player_pos, 10)

    pygame.display.flip()
    clock.tick(30)

pygame.quit()
