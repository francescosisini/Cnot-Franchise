import pygame
import sys
import random
import math

# Inizializzazione di Pygame
pygame.init()

# Dimensioni della finestra
WIDTH, HEIGHT = 1200, 800
FPS = 30

# Creazione della finestra
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Dialogo tra Eva e Caterina - Percorsi vincenti")
clock = pygame.time.Clock()

# Colori
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
NODE_COLOR = (50, 150, 250)
GOAL_COLOR = (250, 100, 100)
HIGHLIGHT_COLOR = (255, 255, 0)
SUCCESS_COLOR = (0, 255, 0)  # Verde per percorsi vincenti
FAIL_COLOR = (255, 0, 0)  # Rosso per percorsi errati
TEXT_COLOR = WHITE

# Definizione delle dimensioni del profilo psicologico
target_profile = {'n': 55, 'e': 60, 'ap': 80, 'am': 45, 'c': 50}
profile = target_profile.copy()
TOLERANCE = 4

# Dizionario delle frasi e percorsi vincenti
dialog_nodes = {
    "N1": {"text": "Purtroppo il documento è stato cancellato.", "type": "n",
           "responses": {"C1": "Non è possibile, devo trovare una soluzione.",
                         "E1": "Chi potrebbe aiutarmi?",
                         "N2": "Oh no, è un disastro!",
                         "AP1": "Ci deve essere un altro modo."}},
    "C1": {"text": "Non è possibile, devo trovare una soluzione.", "type": "c",
           "responses": {"E2": "Forse c'è un backup nascosto.",
                         "N3": "Potrebbe essere una perdita di tempo.",
                         "AP2": "Hai ragione, cerchiamo una nuova strada."}},
    "E1": {"text": "Chi potrebbe aiutarmi?", "type": "e",
           "responses": {"C2": "Forse Laura sa qualcosa.",
                         "N3": "Non c'è nessuno che possa aiutarmi.",
                         "AP3": "Forse un'altra IA ha visto qualcosa."}},
    "N2": {"text": "Oh no, è un disastro!", "type": "n",
           "responses": {"N4": "Non posso farci nulla.",
                         "C3": "Analizziamo meglio la situazione.",
                         "E3": "Cerchiamo subito aiuto."}},
    "AP1": {"text": "Ci deve essere un altro modo.", "type": "ap",
            "responses": {"AP4": "Pensiamo a una soluzione alternativa.",
                          "C4": "Forse serve più tempo per riflettere.",
                          "E4": "Se analizziamo i dati, potremmo capire meglio."}}
}

# Percorsi vincenti (5 percorsi dove il profilo rimane invariato)
winning_paths = [
    ["N1", "C1", "E2", "AP2", "C3"],
    ["N1", "E1", "AP3", "C2", "N3"],
    ["N1", "C1", "N3", "E4", "AP2"],
    ["N1", "AP1", "C4", "AP4", "E3"],
    ["N1", "N2", "C3", "E1", "C2"]
]

# Posizionamento dei nodi
node_positions = {
    "N1": (WIDTH // 2, HEIGHT // 4),
    "C1": (WIDTH // 4, HEIGHT // 3),
    "E1": (3 * WIDTH // 4, HEIGHT // 3),
    "N2": (WIDTH // 4, HEIGHT // 2),
    "AP1": (3 * WIDTH // 4, HEIGHT // 2),
    "E2": (WIDTH // 3, HEIGHT // 2 + 100),
    "N3": (2 * WIDTH // 3, HEIGHT // 2 + 100),
    "AP2": (WIDTH // 2, HEIGHT // 2 + 200),
    "C3": (WIDTH // 3, HEIGHT // 2 + 300),
    "C2": (2 * WIDTH // 3, HEIGHT // 2 + 300),
    "E3": (WIDTH // 2, HEIGHT // 2 + 400),
    "AP3": (WIDTH // 2 + 150, HEIGHT // 2 + 150),
    "N4": (WIDTH // 4, HEIGHT // 2 + 300),
    "C4": (3 * WIDTH // 4, HEIGHT // 2 + 300),
    "E4": (WIDTH // 2, HEIGHT - 50),
    "AP4": (WIDTH // 2 + 200, HEIGHT - 100)
}

# Funzione per disegnare i nodi e connessioni
def draw_graph(selected_path, valid_path):
    screen.fill(BLACK)
    
    # Disegna i collegamenti tra i nodi
    for node, data in dialog_nodes.items():
        x, y = node_positions[node]
        for response in data["responses"]:
            if response in node_positions:
                pygame.draw.line(screen, WHITE, (x, y), node_positions[response], 2)

    # Effetto lampeggiante per i percorsi trovati
    brightness = abs(math.sin(pygame.time.get_ticks() * 0.005)) * 150 + 100

    for node, (x, y) in node_positions.items():
        if node in selected_path:
            color = SUCCESS_COLOR if valid_path else FAIL_COLOR
            color = (min(color[0] + brightness, 255),
                     min(color[1] + brightness, 255),
                     min(color[2] + brightness, 255))
        else:
            color = NODE_COLOR
        
        pygame.draw.circle(screen, color, (x, y), 20)
        font = pygame.font.SysFont(None, 24)
        text = font.render(node, True, TEXT_COLOR)
        screen.blit(text, (x - 10, y - 30))

# Funzione per controllare se il cursore è sopra un nodo
def get_hovered_node(mouse_pos):
    for node, (x, y) in node_positions.items():
        if math.hypot(mouse_pos[0] - x, mouse_pos[1] - y) < 20:
            return node
    return None

# Funzione principale di gioco
def main():
    selected_node = "N1"
    selected_path = ["N1"]
    running = True

    while running:
        screen.fill(BLACK)
        mouse_pos = pygame.mouse.get_pos()
        hovered_node = get_hovered_node(mouse_pos)

        valid_path = any(selected_path == path[:len(selected_path)] for path in winning_paths)

        draw_graph(selected_path, valid_path)

        if hovered_node:
            x, y = node_positions[hovered_node]
            pygame.draw.circle(screen, HIGHLIGHT_COLOR, (x, y), 25, 3)
            font = pygame.font.SysFont(None, 30)
            phrase = dialog_nodes[hovered_node]["text"]
            text_surface = font.render(phrase, True, WHITE)
            screen.blit(text_surface, (x + 30, y))

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            elif event.type == pygame.KEYDOWN:
                if event.key in [pygame.K_1, pygame.K_2, pygame.K_3, pygame.K_4]:
                    responses = list(dialog_nodes[selected_node]["responses"].keys())
                    index = [pygame.K_1, pygame.K_2, pygame.K_3, pygame.K_4].index(event.key)
                    if index < len(responses):
                        selected_node = responses[index]
                        selected_path.append(selected_node)

        pygame.display.flip()
        clock.tick(FPS)

    pygame.quit()
    sys.exit()

# Avvia il gioco
main()
