import pygame
import random

# Inizializza Pygame
pygame.init()

# Dimensioni finestra
WIDTH, HEIGHT = 600, 800
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Quantum Tunnel Chase")

# Colori
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
CYAN = (0, 255, 255)
RED = (255, 0, 0)
YELLOW = (255, 255, 0)

# FPS
clock = pygame.time.Clock()
FPS = 60

# Classe Drone
class Drone:
    def __init__(self, x, y, color):
        self.x = x
        self.y = y
        self.color = color
        self.speed = 5
        self.width = 50

    def move(self, direction):
        if direction == "LEFT" and self.x > 0:
            self.x -= self.speed
        elif direction == "RIGHT" and self.x < WIDTH - self.width:
            self.x += self.speed

    def draw(self):
        # Disegna il drone CH4
        pygame.draw.circle(screen, self.color, (self.x, self.y), 25)
        # Disegna gli idrogeni
        for angle in range(0, 360, 90):
            hx = self.x + 40 * math.cos(math.radians(angle))
            hy = self.y + 40 * math.sin(math.radians(angle))
            pygame.draw.circle(screen, CYAN, (int(hx), int(hy)), 10)

# Classe Ostacoli (qubit)
class Qubit:
    def __init__(self):
        self.x = random.randint(50, WIDTH - 50)
        self.y = -50
        self.size = 20
        self.color = YELLOW
        self.speed = 5

    def move(self):
        self.y += self.speed

    def draw(self):
        pygame.draw.circle(screen, self.color, (self.x, self.y), self.size)

# Inizializza droni e ostacoli
laura_drone = Drone(WIDTH // 2, HEIGHT - 100, WHITE)
agent_drone = Drone(WIDTH // 2, HEIGHT - 200, RED)
qubits = [Qubit() for _ in range(5)]

# Ciclo principale
running = True
while running:
    screen.fill(BLACK)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    # Controlli del giocatore
    keys = pygame.key.get_pressed()
    if keys[pygame.K_LEFT]:
        laura_drone.move("LEFT")
    if keys[pygame.K_RIGHT]:
        laura_drone.move("RIGHT")

    # Muovi e disegna qubit
    for qubit in qubits:
        qubit.move()
        qubit.draw()
        # Reset qubit se esce dallo schermo
        if qubit.y > HEIGHT:
            qubit.y = -50
            qubit.x = random.randint(50, WIDTH - 50)

        # Collisione con Laura
        if abs(qubit.x - laura_drone.x) < 30 and abs(qubit.y - laura_drone.y) < 30:
            print("Game Over!")
            running = False

    # Disegna droni
    laura_drone.draw()
    agent_drone.y += 2  # Movimento automatico del drone dell'agente
    agent_drone.draw()

    # Aggiorna schermo
    pygame.display.flip()
    clock.tick(FPS)

# Esci da Pygame
pygame.quit()
