import pygame
import random
import math

# Inizializza Pygame
pygame.init()

# Imposta dimensioni della finestra
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("CNOT - Corridor Effect")

# Colori
BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
CYAN = (0, 255, 255)
GRAY = (150, 150, 150)
COLORS = [(255, 0, 0), (0, 255, 0), (0, 0, 255), (255, 255, 0), (0, 255, 255)]

# Font e musica
pygame.font.init()
font = pygame.font.Font(None, 74)
pygame.mixer.init()
pygame.mixer.music.load("background_music.mp3")
pygame.mixer.music.play(-1)

# Droni e qubit
drone_center = [WIDTH // 4, HEIGHT // 2]
agent_center = [WIDTH // 2, HEIGHT // 4]
drone_speed = 8
agent_speed = 5
qubits = []
qubit_radius = 10
qubit_speed = 5
game_over = False

# Corridoi
corridors = []
corridor_speed = 5
corridor_width_range = (200, 400)

# Funzione per disegnare i corridoi
def draw_corridors():
    global corridors
    for corridor in corridors:
        pygame.draw.rect(screen, GRAY, corridor)
        corridor[1] += corridor_speed
        if corridor[1] > HEIGHT:
            corridors.remove(corridor)
            generate_corridor()

# Genera un nuovo corridoio
def generate_corridor():
    corridor_width = random.randint(*corridor_width_range)
    corridor_x = random.randint(0, WIDTH - corridor_width)
    corridors.append([corridor_x, -HEIGHT, corridor_width, HEIGHT])

# Movimento dei droni
def move_drone(keys):
    if keys[pygame.K_UP] and drone_center[1] > 0:
        drone_center[1] -= drone_speed
    if keys[pygame.K_DOWN] and drone_center[1] < HEIGHT:
        drone_center[1] += drone_speed
    if keys[pygame.K_LEFT] and drone_center[0] > 0:
        drone_center[0] -= drone_speed
    if keys[pygame.K_RIGHT] and drone_center[0] < WIDTH:
        drone_center[0] += drone_speed

def move_agent():
    if agent_center[0] < drone_center[0]:
        agent_center[0] += agent_speed
    if agent_center[0] > drone_center[0]:
        agent_center[0] -= agent_speed
    if agent_center[1] < drone_center[1]:
        agent_center[1] += agent_speed
    if agent_center[1] > drone_center[1]:
        agent_center[1] -= agent_speed

# Controllo collisioni
def check_collisions():
    global game_over
    for corridor in corridors:
        if (drone_center[0] < corridor[0] or drone_center[0] > corridor[0] + corridor[2]) and 0 < drone_center[1] < HEIGHT:
            game_over = True
        if (agent_center[0] < corridor[0] or agent_center[0] > corridor[0] + corridor[2]) and 0 < agent_center[1] < HEIGHT:
            agent_center[1] += 10  # Penalizza il drone agente

# Ciclo principale
running = True
clock = pygame.time.Clock()
generate_corridor()
while running:
    screen.fill(BLACK)
    keys = pygame.key.get_pressed()

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    if not game_over:
        move_drone(keys)
        move_agent()
        draw_corridors()
        check_collisions()

        pygame.draw.circle(screen, CYAN, drone_center, 12)
        pygame.draw.circle(screen, WHITE, agent_center, 12)
    else:
        text = font.render("Game Over", True, WHITE)
        screen.blit(text, (WIDTH // 2 - text.get_width() // 2, HEIGHT // 2 - text.get_height() // 2))

    pygame.display.flip()
    clock.tick(30)

pygame.quit()
